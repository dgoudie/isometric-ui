/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { NavigationRoute, registerRoute } from 'workbox-routing';
import { NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching';

import { ExpirationPlugin } from 'workbox-expiration';
import { clientsClaim } from 'workbox-core';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

const handler = createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html');
const navigationRoute = new NavigationRoute(handler);
registerRoute(navigationRoute);

registerRoute(
    /.*\.(?:ico|png)$/gi,
    new StaleWhileRevalidate({
        cacheName: 'images',
        plugins: [new ExpirationPlugin({ maxEntries: 50 })],
    })
);

registerRoute(
    ({ url, sameOrigin }) => sameOrigin && url.pathname === '/api/exercises',
    new NetworkFirst({
        cacheName: 'exercise',
        plugins: [new ExpirationPlugin({ maxEntries: 1 })],
    })
);

registerRoute(
    ({ url, sameOrigin }) =>
        sameOrigin && url.pathname.startsWith('/api/exercise/'),
    new NetworkFirst({
        cacheName: 'exercises',
        plugins: [new ExpirationPlugin({ maxEntries: 50 })],
    })
);

registerRoute(
    ({ url }) => url.host === 'fonts.gstatic.com',
    new StaleWhileRevalidate({
        cacheName: 'google_fonts',
        plugins: [new ExpirationPlugin({ maxEntries: 10 })],
    })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

// Any other custom service worker logic can go here.
